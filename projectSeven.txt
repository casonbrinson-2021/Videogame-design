/* 
 * projectTwo.txt
 * 
 * Author: Gregory Cason Brinson
 * Assignment: Project 7 - Pac Fruit
 * Created: 11/6/20
 * Last Edited: 11/6/20
 * Honor Code: "I did not break the honor code on this assignment" -Cason Brinson
*/ 

//-------Creating the Tilemap-------//

var tileMap = [
        "wwwwwwwwwwwwwwwwwwww",
        "               w    ",
        "  e      ef    w   f",
        " fw                 ",
        " w      ww    f    f",
        "w     ww   e  wwwwww",
        "     w       w      ",
        " f ww  e    w    f w",
        "wwww    f  w    f w ",
        "                 w  ",
        "                w  f",
        "     f       f w    ",
        "wwwwwwwww     w     ",
        "                   f",
        "                 ",
        "         f wwwww    ",
        " f  fwwwwww        f",
        "    w               ",
        "    w  f     f    f ",
        "wwwwwwwwwwwwwwwwwwww"];


//-------Creating the objects for the game-------//

//creating the fruit object
var fruitObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.drawMe = true;
    this.checkCollisions = true;
};

//creating the wall object
var wallObj = function(x, y) {
    this.x = x;
    this.y = y;
    
};

var targetObj = function(x, y) {
    this.x = x;
    this.y = y;
};

var qObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.fcost = 0;
};

qObj.prototype.set = function(a, b) {
    this.x = a;
    this.y = b;
};

var graph = new Array(20);
for (var i=0; i<20; i++) {
        graph[i] = new Array(20);
}
//cerating the enemy object
var enemyObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.moveSpeed = 1;
    
    this.angle = 0;
    
    this.haltAngle = 0;
    
    this.turnAngle = 0;
    this.turnAngleDir = 0;
    this.vec = new PVector(0,0);
    
    this.chaseStep = new PVector(0,0);
    
    this.state = 0;     //0 = halt, //1 = turn //2 = chase
    this.position = new PVector(x,y);
    this.whisker1 = new PVector(0, 0);
    this.whisker2 = new PVector(0, 0);
    
    //testing again
    this.target = new targetObj(0, 0);
    this.targetPos = new targetObj(0, 0);
    this.finalDest = new targetObj(0, 0);
    
};

//creating the player object
var playerObj = function(x, y) {
    this.x = x;
    this.y = y;
    this.moveSpeed = 3;
};


//-------initializing the objects for the game-------//
var images = [];                    //holds the custom image for the walls
var fruits = [];                    //holds all the fruits when we initialize them        
var walls = [];                     //holds all the walls when we initialize them
var enemies = [];                   //holds all the enemies when we initialize them
var player = new playerObj(2*20,18*20);     //creates a player object at starting location
var keyArray = [];                          //creates the keyArrya for key presses
var gameOver = false;                       //game over variable
var youWin = false;                         //win variable
var score = 0;                              //keeps track of the score
var gameStart = false;                      //keeps track of when the game starts

var transparency = 1;                       //transparency for Game Over and win background
var enemyTrans = 1;                         //transparency for enemies at Game Over screen
var fruitTrans = 1;                         //transparency for fruits at Win screen



var graph = new Array(20);
var cost = new Array(20);
var inq = new Array(20);
var comefrom = new Array(20);
for (var i=0; i<20; i++) {
    graph[i] = new Array(20);
    cost[i] = new Array(20);
    inq[i] = new Array(20);
    comefrom[i] = new Array(20);
}
var path = [];
var q = [];
for (i=0; i<400; i++) {
    path.push(new PVector(0, 0));
    q.push(new qObj(0, 0));
}
for (i=0; i<20; i++) {
    for(var j=0; j<20; j++) {
        comefrom[i][j] = new PVector(0, 0);
    }
}
var pathLen = 0;
var pathFound = 0;
var qLen = 0;
var qStart = 0;


//-------All the draw functions for the objects-------//

//handles drawing the fruits
fruitObj.prototype.draw = function() {
    fill(255, 122, 0);
    ellipse(this.x, this.y, 20, 19);
    fill(0,255,0);
    ellipse(this.x+2,this.y-8,8,4);
};

//handles drawing the walls
wallObj.prototype.draw = function() {
    //gets image I captured from the canvas at the beginning of the program (custom image)
    image(images[0],this.x,this.y,20,20);
};

//handles drawing the enemy objects
enemyObj.prototype.draw = function() {
    pushMatrix();
    translate(this.position.x, this.position.y);
    rotate(this.angle);
     fill(255,0,0);
     ellipse(0, 0, 20, 20);
     fill(0,0,0);
     ellipse(5, -3,4,4);
     rect(-5, 0, 10, 3);
     ellipse(-5, -3, 4, 4); 
     rect(-7, -7,6,2);
     rect(1, -7,6,2);
     rect(8, 0, 2, 6);
     rect(-10, 0, 2,6);
     rect(4, 4,2,6);
     rect(-6, 4,2,6);
     popMatrix();
};

//handles drawing the player obejct to the screen
playerObj.prototype.draw = function() {
    fill(0,0,255);
    //ellipse(this.x, this.y, 20, 20);
    
    noStroke();
    fill(0,0,0);
    rect(this.x+4,this.y+0,4,8);
    rect(this.x+12,this.y+0,4,8);
    fill(0,0,255);
    rect(this.x+0,this.y+0,20,2);
    fill(0,0,255);
    rect(this.x+1,this.y+8,18,12);
    fill(0,0,0);
    rect(this.x+0,this.y+8,3,4);
    rect(this.x+0,this.y+16,3,4);
    rect(this.x+17,this.y+8,3,4);
    rect(this.x+17,this.y+16,3,4);
};

//handles moving the player obejct based on key presses by the user
//also handles all player collisions with walls, fruits, and enemies
playerObj.prototype.move = function() {
    //up arrow
    if(keyArray[UP] === 1) {
        this.y-=this.moveSpeed;
    }
    //down arrow
    if(keyArray[DOWN] === 1) {
        this.y+=this.moveSpeed;
    }
    //left arrow
    if(keyArray[LEFT] === 1) {
        this.x-=this.moveSpeed;
    }
    //right arrow
    if(keyArray[RIGHT] === 1) {
        this.x+=this.moveSpeed;
    }
    
    //wall collission detection
    if((this.x) < 0) {
        this.x+=this.moveSpeed;
    }
    if((this.x+20) > 400) {
        this.x-=this.moveSpeed;
    }
    if((this.y) < 0) {
        this.y+=this.moveSpeed;
    }
    if((this.y+20) > 400) {
        this.y-=this.moveSpeed;
    }
    for(var i = 0; i < walls.length; i++) {
        if((this.y+20 > walls[i].y) && (this.y < walls[i].y+20) && (this.x+20 > walls[i]             .x) && (this.x < walls[i].x+20)) {
            if((keyArray[UP] === 1)) {
                this.y+=15;
            }
            if((keyArray[DOWN] === 1)) {
                this.y-=15;

            }
            if((keyArray[LEFT] === 1)) {
                this.x+=15;

            }
            if((keyArray[RIGHT] === 1)) {
                this.x-=15;

            }
        }
    }
    
    //handles collision of player and fruits
    for(var i = 0; i < fruits.length; i++) {
        if((this.y+20 > fruits[i].y-10) && (this.y < fruits[i].y+10) && (this.x+20 >                 fruits[i].x-10) && (this.x < fruits[i].x+10) && (fruits[i].checkCollisions)){
            fruits[i].drawMe = false;
            fruits[i].checkCollisions = false;
            score++;
        }
    }
    
    //handles collision of playe and enemies
    for(var i = 0; i < enemies.length; i++) {
        if((this.y+20 > enemies[i].position.y-10) && (this.y < enemies[i].position.y+10) && (this.x+20 >                 enemies[i].position.x-10) && (this.x < enemies[i].position.x+10)) {
            gameOver = true;
        }
    }
};

//handles enemy movement up and down
//also handles collision detection with walls
enemyObj.prototype.moveUpDown = function() {
    this.y+=this.moveSpeed;
    if(this.y-10 < 0) {
        this.moveSpeed = -this.moveSpeed;
    }
    if(this.y+10 > 400) {
        this.moveSpeed = -this.moveSpeed;
    }
    //collision checking
    for(var i = 0; i < walls.length; i++) {
        if((this.y+10 > walls[i].y) && (this.y-10 < walls[i].y+20) && (this.x+10 > walls[i].x) && (this.x-10 < walls[i].x+20)) {
            this.moveSpeed = -this.moveSpeed;
        }
    }
};

//handles enemy movement left and right
//also handles collision detection with walls
enemyObj.prototype.moveLeftRight = function() {
    this.x+=this.moveSpeed;
    if(this.x-10 < 0) {
        this.moveSpeed = -this.moveSpeed;
    }
    if(this.x+10 > 400) {
        this.moveSpeed = -this.moveSpeed;
    }

    //collision checking with walls
    for(var i = 0; i < walls.length; i++) {
        if((this.y+10 > walls[i].y) && (this.y-10 < walls[i].y+20) && (this.x+10 > walls[i].x) && (this.x-10 < walls[i].x+20)) {
            this.moveSpeed = -this.moveSpeed;
        }
    }
    
};

//-------New A-Star functions for the enemy obnject so that it can chase the player


//place the stuff back here

var initGraph = function(x, y) {
    for (var i = 0; i< 20; i++) {
        for (var j = 0; j<20; j++) {
            if (graph[i][j] > 0) {
                graph[i][j] = 0;
            }
            inq[i][j] = 0;
            cost[i][j] = 0;
        }
    }
    
    graph[x][y] = 1;
};

var findIntersection = function(p) {
    var distance = 0;
    
    for (var i=0; i<walls.length; i++) {
        var d = dist(p.x, p.y, walls[i].x+10, walls[i].y+10);
        if (d < 20) {
            distance += d;
        }
    }
    
    if (distance === 0) {
        distance = 100000;
    }
    
    return(distance);
};

enemyObj.prototype.changeState = function(x) {
    this.state = x;
};

enemyObj.prototype.collideWall = function() {
    var collide = 0;
    this.chaseStep.set(this.target.x - this.position.x, this.target.y - this.position.y);
    this.chaseStep.normalize();
    this.chaseStep.mult(15);
    var ahead = PVector.add(this.position, this.chaseStep);
    for (var i=0; i<walls.length; i++) {
        if (dist(ahead.x, ahead.y, walls[i].x+10, walls[i].y+10) < 20) {
            collide = 1;
            
            this.whisker1.set(this.chaseStep.x, this.chaseStep.y);
            this.whisker2.set(this.chaseStep.x, this.chaseStep.y);
            this.whisker1.rotate(45);
            this.whisker2.rotate(-45);
            this.whisker1.add(this.position);
            this.whisker2.add(this.position);
            var dist1 = findIntersection(this.whisker1);
            var dist2 = findIntersection(this.whisker2);
            
            if (dist1 > dist2) {
                this.target.x = this.whisker1.x;
                this.target.y = this.whisker1.y;
            }
            else {
                this.target.x = this.whisker2.x;
                this.target.y = this.whisker2.y;
            }
        }
    }
    return(collide);
};

enemyObj.prototype.chase = function()  {
    if (this.collideWall() === 1) {
        this.changeState(1);
    }
    else if (dist(this.target.x, this.target.y, this.position.x, this.position.y) > 2) {
        this.chaseStep.set(this.target.x - this.position.x, this.target.y - this.position.y);
        this.chaseStep.normalize();
        this.position.add(this.chaseStep);
    }
    else {
        if ((this.finalDest.x === this.target.x) && (this.finalDest.y === this.target.y)) {
            this.changeState(0);
        }
        else {
            pathLen--;
            if (pathLen > 0) {
                this.target.x = path[pathLen].x;
                this.target.y = path[pathLen].y;
            }
            else {
                this.target.x = this.finalDest.x;
                this.target.y = this.finalDest.y;
            }
            this.changeState(1);
        }
    }
};


enemyObj.prototype.halt = function()  {
    if (dist(this.position.x, this.position.y, this.target.x, this.target.y) < 5) {
        this.changeState(1);
    }
};
enemyObj.prototype.turn = function()  {
    this.vec.set(this.target.x - this.position.x, this.target.y - this.position.y);
    this.turnAngle = this.vec.heading();
    var angleDiff = abs(this.turnAngle - this.angle);
    if (angleDiff > 2) {
        if (this.turnAngle > this.angle) {
            this.turnAngleDir = 1;
        }
        else {
            this.turnAngleDir = -1;
        }
        if (angleDiff > 180) {
            this.turnAngleDir = -this.turnAngleDir;
        }
        
        this.angle += this.turnAngleDir;
        if (this.angle > 180) {
            this.angle = -179;
        }
        else if (this.angle < -180) {
            this.angle = 179;
        }
    }
    else {
        this.changeState(2);
    }
};

enemyObj.prototype.findAStarPath = function(x, y) {
    var i, j, a, b;
    qLen = 0;
    graph[x][y] = 1;
    inq[x][y] = 1;
    q[qLen].set(x, y);
    q[qLen].fcost = 0;
    qLen++;
    pathLen = 0;
    qStart = 0;
    
    var findMinInQ = function() {
        var min = q[qStart].fcost;
        var minIndex = qStart;
        for (var i = qStart+1; i<qLen; i++) {
            if (q[i].fcost < min) {
                min = q[i].qStart;
                minIndex = i;
            }
        }
        if (minIndex !== qStart) {  // swap
            var t1 = q[minIndex].x;
            var t2 = q[minIndex].y;
            var t3 = q[minIndex].fcost;
            q[minIndex].x = q[qStart].x;
            q[minIndex].y = q[qStart].y;
            q[minIndex].fcost = q[qStart].fcost;
            q[qStart].x = t1;
            q[qStart].y = t2;
            q[qStart].fcost = t3;
        }
    };
    
    while ((qStart < qLen) && (pathFound === 0)) {
	findMinInQ();
        i = q[qStart].x;
        j = q[qStart].y;
        graph[i][j] = 1;
        qStart++;
        
        if ((i === this.targetPos.x) && (j === this.targetPos.y)) {
            pathFound = 1;
            path[pathLen].set(j*20+10, i*20+10);
            pathLen++;
        }
        
        a = i+1;
        b = j;
        if ((a < 20) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                inq[a][b] = 1;
                comefrom[a][b].set(i, j);
                q[qLen].set(a, b);
                cost[a][b] = cost[i][j] + 10;
                q[qLen].fcost = cost[a][b] + dist(b*20+10, a*20+10, this.finalDest.x, this.finalDest.y);
                qLen++;
            }
        }
        a = i-1;
        b = j;
        if ((a >= 0) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                inq[a][b] = 1;
                comefrom[a][b].set(i, j);
                q[qLen].set(a, b);
                cost[a][b] = cost[i][j] + 10;
                q[qLen].fcost = cost[a][b] + dist(b*20+10, a*20+10,this.finalDest.x, this.finalDest.y);
                qLen++;
            }
        }
        a = i;
        b = j+1;
        if ((b < 20) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                inq[a][b] = 1;
                comefrom[a][b].set(i, j);
                q[qLen].set(a, b);
                cost[a][b] = cost[i][j] + 10;
                q[qLen].fcost = cost[a][b] + dist(b*20+10, a*20+10,this.finalDest.x, this.finalDest.y);
                qLen++;
            }
        }
        a = i;
        b = j-1;
        if ((b >= 0) && (pathFound === 0)) {
            if ((graph[a][b] === 0) && (inq[a][b] === 0)) {
                inq[a][b] = 1;
                comefrom[a][b].set(i, j);
                q[qLen].set(a, b);
                cost[a][b] = cost[i][j] + 10;
                q[qLen].fcost = cost[a][b] + dist(b*20+10, a*20+10,this.finalDest.x, this.finalDest.y);
                qLen++;
            }
        }
    }   // while
    
    while ((i !== x) || (j !== y)) {
        a = comefrom[i][j].x;
        b = comefrom[i][j].y;
        path[pathLen].set(b*20 + 10, a*20+10);
        pathLen++;
        i = a;
        j = b;
    }
};

//-------End of new A-Star things-------//





//-------Game over animations to make the game cool looking--------//

//handles how the enemies will move whent he game is over
enemyObj.prototype.gameOverMovement = function() {
    this.y+=this.moveSpeed;
    if(this.y-10 < 0) {
        this.moveSpeed = -this.moveSpeed;
    }
    if(this.y+10 > 400) {
        this.moveSpeed = -this.moveSpeed;
    }
};

//handles where the enemies will be drawn after the game is over
enemyObj.prototype.gameOverDraw = function() {
     fill(255,0,0, enemyTrans);
     ellipse(this.x, this.y, 20, 20);
     fill(0,0,0, enemyTrans);
     ellipse(this.x+5, this.y-3,4,4);
     rect(this.x-5, this.y, 10, 3);
     ellipse(this.x-5, this.y-3, 4, 4); 
     rect(this.x-7, this.y-7,6,2);
     rect(this.x+1, this.y-7,6,2);
     rect(this.x+8, this.y, 2, 6);
     rect(this.x-10, this.y, 2,6);
     rect(this.x+4, this.y+4,2,6);
     rect(this.x-6, this.y+4,2,6);
};


//handles drawing the fruits after the game has been won
fruitObj.prototype.gameOverDraw = function() {
    fill(255, 122, 0, fruitTrans);
    ellipse(this.x, this.y, 20, 19);
    fill(0,255,0, fruitTrans);
    ellipse(this.x+2,this.y-8,8,4);
};


//-------initializing functions-------//

//initialize the custom image for the walls
var initImages = function() {
    fill(138, 137, 128);
    noStroke();

    rect(0,0,400,200);
    rect(0,200,400,400);
    fill(0,0,0);
    rect(0,0,400,10);
    rect(0,180,400,20);
    rect(190,200,10,200);
    rect(0,0,10,200);
    rect(390,0,10,200);
    rect(0,390,400,10);
    
    images.push(get(0,0,width,height));
    background(255,255,255);
};

//initialize the tilemap for gameplay
var initTilemap = function() {
    for (var i = 0; i< tileMap.length; i++) {
        for (var j =0; j < tileMap[i].length; j++) {
            switch (tileMap[i][j]) {
                case 'f': fruits.push(new fruitObj(j*20, i*20));
                            graph[i][j] = 0;
                    break;
                case 'w': walls.push(new wallObj(j*20, i*20));
                            graph[i][j] = -1;
                    break;
                case 'e': enemies.push(new enemyObj(j*20, i*20));
                            graph[i][j] = 0;
                
                    break;
                default: graph[i][j] = 0;
            }
        }
    }
};

//initialize tilemap to set up the playing field
initImages();
initTilemap();


//-------handle key presses-------//

//determines the value for if a key was pressed will be 1
var keyPressed = function() {
    keyArray[keyCode] = 1;
};

//determines the value for if a key was released will be 0
var keyReleased = function() {
    keyArray[keyCode] = 0;
};

enemyObj.prototype.setPath = function() {
    this.target.x = player.x;
    this.target.y = player.y;
    this.finalDest.x = this.target.x;
    this.finalDest.y = this.target.y;
    this.targetPos.x = floor(this.finalDest.y / 20);
    this.targetPos.y = floor(this.finalDest.x / 20);
    var i = floor(this.position.y / 20);
    var j = floor(this.position.x / 20);
    initGraph(i, j);
    pathFound = 0;
    pathLen = 0;
    this.findAStarPath(i, j);
    pathLen--;
    this.target.x = path[pathLen].x;
    this.target.y = path[pathLen].y;
    if (this.state !== 1) {
        this.changeState(1);
    }
};


var mouseClicked = function() {
    gameStart = true;
    enemies[0].setPath();
    enemies[1].setPath();
    enemies[2].setPath();
    enemies[3].setPath();
};




//-------main draw loop of the game-------//

//main draw loop that runs over and over
var draw = function() {
    if(gameStart === false) {
        background(200, 200, 200);
        
        //instructions text
        fill(0,255,0);
        textSize(50);
        text("Pac Fruit!", 40, 80);
        textSize(30);
        fill(255, 122, 0);
        text("How To Play", 40, 130);
        textSize(20);
        text("You are a Fruit Rescuer trying to rescue \nfruits from evil from fruit eaters! You \nmust collect all 20 fruits to win! Watch \n out for the guards, if they catch you \nthen its Game Over!",40,150);
        
        textSize(30);
        text("Controls", 40, 290);
        textSize(20);
        text("Move = arrow keys", 40, 310);
        
        if(((frameCount % 50) !== 0) && ((frameCount % 50) !== 1) && ((frameCount % 50) !==             2)) {
            fill(0, 255, 0);
            textSize(18);
            text("click anywhere on the game screen to start!", 33, 360);
        }
        
        /*
        //starts the game if the user click the screen
        if(mouseIsPressed) {
            gameStart = true;
        }
        */
    }
    
    //starts the game if the game start variable is true
    else if(gameStart === true) {
        if((gameOver === false) && (youWin === false)) {
            background(200, 200, 200);
            for (var i = 0; i < fruits.length; i++) {
                if(fruits[i].drawMe) {
                    fruits[i].draw();
                }
            }
            for (i = 0; i < walls.length; i++) {
                walls[i].draw();
            }
            for (i = 0; i < enemies.length; i++) {
                enemies[i].draw();
                if(enemies[i].state === 0) {
                    enemies[i].halt();
                }
                else if(enemies[i].state === 1) {
                    enemies[i].turn();
                }
                else if(enemies[i].state === 2) {
                    enemies[i].chase();
                }
                
                if((i === 0) && ((frameCount % 500) === 0)) {
                    enemies[0].setPath();
                }
                else if((i === 1) && ((frameCount % 505) === 0)){
                    enemies[1].setPath();
                }
                else if((i === 2) && ((frameCount % 510) === 0)){
                    enemies[2].setPath();
                }
                else if((i === 3) && ((frameCount % 515) === 0)){
                    enemies[3].setPath();
                }
            }
            
            //draw and move the player
            player.draw();
            player.move();
            
            //determine if the palyer has won
            //reason its set at 21 is so the normal game will run one more time 
            //to get rid of the last fruit 
            if(score === 21) {
                youWin = true;
            }
            if(score === 20) {
                score++;
            }
        }
        
        //handle what happens after the game is over
        //basically fades in background, says Game Over, says score, and fades in bad guys 
        else if(gameOver) {
            background(0,0,0,transparency);
            if(transparency < 255) {
                transparency+=1.5;
            }
            
            if(transparency > 80) {
                fill(255,255,255);
                textSize(60);
                text("Game Over", 50,200);
            }
            if(transparency > 140) {
                textSize(20);
                text("Score: ", 160, 260);
                text(score, 225,260);
            }
            if(transparency > 250) {
                for(var i = 0; i < enemies.length; i++) {
                    enemies[i].gameOverDraw();
                    enemies[i].gameOverMovement();
                    enemyTrans+=0.5;
                }
            }
        }
        
        //handles what happens after the user has won the game
        //basically fades in a background, says you win, gives score, and fades in fruits
        else if(youWin) {
            background(255, 255, 255,transparency);
            if((transparency < 255)) {
                transparency+=3;
            }
            if(transparency > 100) {
                fill(0, 255, 255);
                textSize(60);
                text("You Win!", 80, 200);
            }
            if(transparency > 180) {
                fill(0, 255, 255);
                textSize(20);
                text("Score: ", 150,240);
                text(score, 215, 240);
            }
            if(transparency > 250) {
                for(var i = 0; i < fruits.length; i++) {
                    fruits[i].gameOverDraw();
                    
                }
                fruitTrans+=1;
            }
        }
    }
};







